[project]
name = "json4humans"
description = "Python tools for JSONC and JSON5 (aka. JSON for humans)"
authors = [
    {name = "Axel H.", email = "noirbizarre@gmail.com"},
]
dependencies = [
    "lark[regex]>=1.1.2",
]
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}
dynamic = ["version"]
[project.optional-dependencies]

[project.urls]
Homepage = "https://github.com/noirbizarre/json4humans#readme"
Documentation = "https://json4humans.rtfd.io"
Changelog = "https://github.com/noirbizarre/json4humans/blob/main/CHANGELOG.md"
Repository = "https://github.com/noirbizarre/json4humans"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.version]
source = "scm"
write_to = "json4humans/_version.py"
write_template = '__version__ = "{}"'

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.1.2",
    "pytest-sugar>=0.9.5",
    "pytest-cov>=3.0.0",
    "pytest-benchmark[histogram]>=3.4.1",
]
lint = [
    "black==23.3.0",
    "mypy==1.3.0",
    "absolufy-imports>=0.3.1",
    "ruff==0.0.270",
]
tox = [
    "tox",
    "tox-pdm>=0.5",
]
doc = [
    "mkdocs>=1.3.1",
    "mkdocs-material>=8.3.9",
    "mkdocstrings[python]>=0.19.0",
]
release = [
    "emotional",
]

[tool.pdm.scripts]
test.help = "Run the test suite"
test.cmd = "pytest"

tox.help = "Run the test suite against all supported Python version"
tox.cmd = "tox"

lint.help = "Lint all tracked files using pre-commit"
lint.cmd = "pre-commit run --all-files"

cover.help = "Run the test suite with coverage"
cover.composite = [
  """
  test
    --cov-report=term
    --cov=json4humans
    --cov-report=html:reports/coverage
    --cov-report=xml:reports/coverage.xml
    --junitxml=reports/tests.xml
  """
]

pre_bench = "mkdir -p reports/benchmarks"
bench.help = "Run the benchmarks suite"
bench.cmd = """
pytest --verbose
  -o "python_files=bench*.py"
  -o "python_functions=bench_*"
  --benchmark-group-by=fullname
  --benchmark-autosave
  --benchmark-disable-gc
  --benchmark-histogram=reports/benchmarks/histogram
  --benchmark-json=reports/benchmarks/data.json
  --benchmark-max-time=5
  --benchmark-min-time=1
  --benchmark-save-data
  --junitxml=reports/benchmarks/junit.xml
"""

compare.help = "Run the benchmarks comparison tool"
compare.cmd = "pytest-benchmark compare"

doc.help = "Build the documentation"
doc.cmd = "mkdocs build"

"doc:watch".help = ""
"doc:watch".cmd = "mkdocs serve"

changelog.help = "Generate/update the changelog"
changelog.cmd = "cz changelog --incremental"

bump.help = "Bump the version using commitizen"
bump.cmd = "cz bump --changelog"


[tool.pdm.vscode]
linters = ["ruff","mypy"]
formatter = "black"
tests = "pytest"


[tool.black]
line-length = 100
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | __pycache__
  | __pypackages__
  | build
  | dist
  | tests/fixtures
)/
'''


[tool.pytest.ini_options]
addopts = "-ra"
norecursedirs = ".git build dist"
testpaths = [
  "json4humans/",
  "tests/",
]
markers = [
  "jsons(*modules): Mark to be tested against multiple JSON modules/version",
  "fixturize(glob): parametrize the test with a fixture glob pattern",
  "json: Mark a function to be tested against the JSON implementation",
  "json5: Mark a function to be tested against the JSON5 implementation",
  "jsonc: Mark a function to be tested against the JSONC implementation",
]


[tool.coverage.run]
source = ["json4humans"]
branch = true
omit = [
  "tests/*",
]

[tool.coverage.report]
exclude_lines = [
  'def __repr__',
  'if TYPE_CHECKING:',
]
ignore_errors = true


[tool.mypy]
exclude = [
  "docs",
]


[tool.ruff]
line-length = 110
fix = true
respect-gitignore = true
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # McCabe # fake8-comprehension
    "C",
    # Pyupgrade
    "UP",
    # isort
    "I001"
]
src = [".", "tests"]

[tool.ruff.isort]
known-first-party = ["json4humans"]
known-third-party = ["lark", "pytest"]


[tool.commitizen]
name = "emotional"
github = "noirbizarre/json4humans"
version_provider = "scm"

